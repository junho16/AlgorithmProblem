package leetcode;

import java.util.Stack;

/**
 1、求第i个数左边第一个比它小的元素的位置

 从左到右遍历元素构造单调递增栈：一个元素左边第一个比它小的数的位置就是将它插入单调递增栈时的栈顶元素，若栈为空，则说明不存在这样的数。

 举例来说，nums=[5,4,3,4,5]，初始时栈空stack=[]

 i=0：栈空，左边没有比它小的元素，同时下标0入栈，stack=[0]；
 i=1：当前元素4小于栈顶元素对应的元素5，故将栈顶弹出，此时栈空，下标1入栈，stack=[1]；
 i=2：当前元素3小于栈顶元素对应的元素4，故将栈顶弹出，此时栈空，下标2入栈，stack=[2]；
 i=3：当前元素4大于栈顶元素对应的元素3，下标3入栈，stack=[2,3]；
 i=4：当前元素5等于栈顶元素对应的元素4，下标4入栈，stack=[2,3,4]；
 2、求第i个数左边第一个比它大的元素的位置

 从左到右遍历元素构造单调递减栈：一个元素左边第一个比它大的数的位置就是将它插入单减栈时栈顶元素的值，若栈为空，则说明不存在这样的数。

 3、求第i个数右边第一个比它小的元素的位置

 从右到左遍历元素构造单调递增栈：一个元素右边第一个比它小的数的位置就是将它插入单增栈时栈顶元素的值，若栈为空，则说明不存在这样的数。

 从左到右遍历元素构造单调递增栈：一个元素右边第一个比它小的数的位置就是将它弹出栈时即将入栈的元素，如果没被弹出栈，说明不存在这样的数。

 4、求第i个数右边第一个比它大的元素的位置

 从右到左遍历元素构造单调递减栈：一个元素右边第一个比它大的数的位置就是将它插入单减栈时栈顶元素的值，若栈为空，则说明不存在这样的数。

 从左到右遍历元素构造单调递减栈：一个元素右边第一个比它大的数的位置就是将它弹出栈时即将入栈的元素的下标，如果没被弹出栈，说明不存在这样的数。

 * 单调栈
 * 739. 每日温度
 * 请根据每日 气温 列表 temperatures ，请计算在每一天需要等几天才会有更高的温度。如果气温在这之后都不会升高，请在该位置用 0 来代替。
 */
public class Main739 {
    public int[] dailyTemperatures(int[] temperatures) {
        Stack<Integer> stack = new Stack<>();
        int[] res = new int[temperatures.length];
        for(int i = temperatures.length -1 ; i >=0 ; i--){
            while (!stack.isEmpty() && temperatures[stack.peek()] <= temperatures[i]){
                stack.pop();
            }
            if(!stack.isEmpty()){
                res[i] = stack.peek() - i;
            }
            stack.push(i);
        }
        for(int i = 0 ;i < res.length ; i++){
            System.out.print(res[i] + " ");
        }
        return res;
    }
}
